"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/playground/page",{

/***/ "(app-pages-browser)/./app/utils/urlState.ts":
/*!*******************************!*\
  !*** ./app/utils/urlState.ts ***!
  \*******************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   buildShareURL: () => (/* binding */ buildShareURL),\n/* harmony export */   encodeStateToQuery: () => (/* binding */ encodeStateToQuery),\n/* harmony export */   parseQueryToState: () => (/* binding */ parseQueryToState)\n/* harmony export */ });\n// Pure helpers for encoding/decoding Playground UI state into URL query strings.\n// No Next.js or DOM APIs used, safe for unit testing.\n/**\n * Build a URLSearchParams from UIState.\n * Notes:\n * - If autoStyle is true, theme and themeTokens are omitted (backend infers style from prompt).\n * - Undefined/empty values are omitted.\n */ function encodeStateToQuery(state) {\n    var _state_prompt;\n    const sp = new URLSearchParams();\n    const trimmedPrompt = (_state_prompt = state.prompt) === null || _state_prompt === void 0 ? void 0 : _state_prompt.trim();\n    if (trimmedPrompt) sp.set('prompt', trimmedPrompt);\n    if (typeof state.seed === 'number' && Number.isFinite(state.seed)) {\n        sp.set('seed', String(state.seed));\n    }\n    var _state_styleMode;\n    const mode = (_state_styleMode = state.styleMode) !== null && _state_styleMode !== void 0 ? _state_styleMode : state.autoStyle ? 'auto' : 'explicit';\n    const auto = mode === 'auto';\n    if (auto) {\n        sp.set('autoStyle', '1');\n        sp.set('styleMode', 'auto');\n    } else if (state.autoStyle === false) {\n        sp.set('autoStyle', '0');\n        sp.set('styleMode', mode);\n    }\n    // Only include theme/tokens when not in auto style mode\n    if (!auto && mode !== 'seeded') {\n        var _state_themeTokens, _state_themeTokens1, _state_themeTokens2;\n        if (state.theme) sp.set('theme', state.theme);\n        if ((_state_themeTokens = state.themeTokens) === null || _state_themeTokens === void 0 ? void 0 : _state_themeTokens.accent) sp.set('accent', state.themeTokens.accent);\n        if ((_state_themeTokens1 = state.themeTokens) === null || _state_themeTokens1 === void 0 ? void 0 : _state_themeTokens1.radius) sp.set('radius', state.themeTokens.radius);\n        if ((_state_themeTokens2 = state.themeTokens) === null || _state_themeTokens2 === void 0 ? void 0 : _state_themeTokens2.font) sp.set('font', state.themeTokens.font);\n    }\n    if (state.variationStrategy) {\n        sp.set('variationStrategy', state.variationStrategy);\n    }\n    // Return without leading \"?\"\n    return sp.toString();\n}\n/**\n * Parse query string or URLSearchParams into UIState.\n * - Accepts booleans as '1'/'0' or 'true'/'false' (case-insensitive).\n * - Coerces seed to number if finite; otherwise undefined.\n * - If autoStyle resolves to true, theme and themeTokens will be dropped.\n */ function parseQueryToState(qs) {\n    const sp = typeof qs === 'string' ? new URLSearchParams(qs.startsWith('?') ? qs.slice(1) : qs) : qs;\n    const getBool = (key)=>{\n        var _sp_get;\n        if (!sp.has(key)) return undefined;\n        const v = (_sp_get = sp.get(key)) === null || _sp_get === void 0 ? void 0 : _sp_get.toLowerCase();\n        if (v === '1' || v === 'true') return true;\n        if (v === '0' || v === 'false') return false;\n        return undefined;\n    };\n    const state = {};\n    var _sp_get;\n    const prompt = (_sp_get = sp.get('prompt')) !== null && _sp_get !== void 0 ? _sp_get : undefined;\n    if (prompt && prompt.trim().length > 0) state.prompt = prompt;\n    const seedRaw = sp.get('seed');\n    if (seedRaw != null && seedRaw !== '') {\n        const n = Number(seedRaw);\n        if (Number.isFinite(n)) state.seed = n;\n    }\n    const autoStyle = getBool('autoStyle');\n    if (typeof autoStyle !== 'undefined') state.autoStyle = autoStyle;\n    const styleMode = sp.get('styleMode') || null;\n    if (styleMode) state.styleMode = styleMode;\n    if (!styleMode && typeof state.autoStyle === 'boolean') {\n        state.styleMode = state.autoStyle ? 'auto' : 'explicit';\n    }\n    const theme = sp.get('theme');\n    var _sp_get1;\n    const accent = (_sp_get1 = sp.get('accent')) !== null && _sp_get1 !== void 0 ? _sp_get1 : undefined;\n    var _sp_get2;\n    const radius = (_sp_get2 = sp.get('radius')) !== null && _sp_get2 !== void 0 ? _sp_get2 : undefined;\n    const font = sp.get('font');\n    const variationStrategy = sp.get('variationStrategy');\n    if (variationStrategy) state.variationStrategy = variationStrategy;\n    // If autoStyle=true OR styleMode=seeded, ignore explicit theme/tokens (frontend will derive)\n    const allowExplicit = !(autoStyle === true || styleMode === 'seeded');\n    if (allowExplicit) {\n        if (theme) state.theme = theme;\n        const tokens = {};\n        if (accent) tokens.accent = accent;\n        if (radius) tokens.radius = radius;\n        if (font) tokens.font = font;\n        if (Object.keys(tokens).length > 0) state.themeTokens = tokens;\n    }\n    return state;\n}\n/**\n * Build a full shareable URL by appending the encoded query to a base URL.\n * If base already has a query, it will be replaced.\n */ function buildShareURL(baseUrl, state) {\n    const q = encodeStateToQuery(state);\n    const hasHash = baseUrl.includes('#') ? baseUrl.indexOf('#') : -1;\n    const [beforeHash, hash] = hasHash >= 0 ? [\n        baseUrl.slice(0, hasHash),\n        baseUrl.slice(hasHash)\n    ] : [\n        baseUrl,\n        ''\n    ];\n    const baseNoQuery = beforeHash.split('?')[0];\n    const sep = baseNoQuery.includes('?') ? '' : '?';\n    return \"\".concat(baseNoQuery).concat(sep).concat(q).concat(hash);\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./app/utils/urlState.ts\n"));

/***/ })

});